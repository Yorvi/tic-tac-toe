{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","C_Users_R64429_Desktop_side_projects_tic_tac_toe_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_Users_R64429_Desktop_side_projects_tic_tac_toe_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_R64429_Desktop_side_projects_tic_tac_toe_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","_this3","current","winner","moves","map","move","desc","key","jumpTo","alert","handleClick","lines","_lines$i","C_Users_R64429_Desktop_side_projects_tic_tac_toe_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e32db715.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n// Parent Component = Board\r\n// -> Child Component = Square\r\n\r\n// Lone Square Component\r\n//  - This square component renders a single button, where the X or O will go.\r\nfunction Square(props) {\r\n  // // Components use \"state\" to remember things... React components can have state by setting this.state in their constructors. this.state should be considered as private to a React component that itâ€™s defined in.\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   // In JavaScript classes, you need to always call super when defining the constructor of a subclass. All React component classes that have a constructor should start it with a super(props) call.\r\n\r\n  //   this.state = {\r\n  //     value: null\r\n  //   };\r\n  //   // this.state will store the current value of the square and change it when the Square is clicked.\r\n  // }\r\n\r\n  return (\r\n    <button \r\n      className=\"square\" \r\n      onClick={props.onClick}>\r\n        {props.value}\r\n    </button>\r\n    // Passed in prop ( {this.props.value} ) from parent component ( value={i} )\r\n    // Passing in props is how information flows in React Apps, fromparents to children.\r\n  );\r\n};\r\n\r\n// Entire Board Component\r\n//  - This board component renders 9 squares (3 in each row).\r\nclass Board extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     squares: [\r\n  //       null, null, null, \r\n  //       null, null, null, \r\n  //       null, null, null\r\n  //     ],\r\n  //     xIsNext: true,\r\n  //   };\r\n  // };\r\n\r\n  // handleClick(i) {\r\n  //   let squares = this.state.squares.slice();\r\n  //   if (calculateWinner(squares) || squares[i]) {\r\n  //     return;\r\n  //   }\r\n  //   squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n  //   this.setState({\r\n  //     squares: squares,\r\n  //     xIsNext: !this.state.xIsNext,\r\n  //   });\r\n  // };\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]} \r\n        onClick={() => this.props.onClick(i)}\r\n      /> /* value = prop, can pass this to the child component */\r\n    )\r\n  };\r\n\r\n  render() {\r\n    // let winner = calculateWinner(this.state.squares);\r\n    // let status;\r\n    // if (winner) {\r\n    //   status = 'Winner: ' + winner;\r\n    // } else {\r\n    //   status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    // };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\n\r\n// Game Mechanics Components\r\n//  - This game component renders the board with values in the placeholder that we'll modify.\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: [\r\n            null, null, null, \r\n            null, null, null, \r\n            null, null, null\r\n          ],\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    let history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    let current = history[history.length - 1];\r\n    let squares = current.squares.slice();\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext,\r\n    });\r\n  };\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let history = this.state.history;\r\n    let current = history[this.state.stepNumber];\r\n    let winner = calculateWinner(current.squares);\r\n\r\n    let moves = history.map((step, move) => {\r\n      let desc = move ? 'Go to move #' + move : 'Go to game start';\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n      status = \"Winner: \" + winner;\r\n      alert(\"Winner: \" + winner);\r\n    } else {\r\n      status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board squares={current.squares} onClick={i => this.handleClick(i)} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    let [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    };\r\n  };\r\n  return null;\r\n};\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}